// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract user {
    address [] public currently_logged_in;
    address [] public registered_users;
    mapping (address => userData) public allUsers;

    struct userData{
        address user_address;
        string username;
        string user_img_cid;
        string user_img_filename;
        string DOB;
        uint age;
        string desc;
        string email;
    }

    // function to check if user is registered or not, if not then we can have some default values
    function Check_if_registered(address _user_address) public view returns (bool){
        bool found = false;
        for(uint i = 0 ; i < registered_users.length; i ++){
            if(registered_users[i] == _user_address){
                found = true;
                break;
            }
        }
        return found;
    }

    // function to add new details to the profile
    function AddProfileDetails(string memory _username, string memory _user_img_cid, string memory _user_img_filename, string memory _DOB, uint _age, string memory _desc, string memory _email, address _user_address) public {
        allUsers[_user_address] = userData(_user_address, _username, _user_img_cid, _user_img_filename, _DOB, _age, _desc, _email);
        if(Check_if_registered(_user_address) == false){
            registered_users.push(_user_address);
        }
    }

    // login
    function Login(address _user_address) public {
        currently_logged_in.push(_user_address);
    }

    // currently logged user
    function check_if_currently_logged_in(address _user_address) public view returns(bool){
         bool found = false;
        for(uint i = 0 ; i < currently_logged_in.length; i ++){
            if(currently_logged_in[i] == _user_address){
                found = true;
                break;
            }
        }
        return found;
    }

    // logout
    function LogOut(address _user_address) public{
        for(uint i = 0 ; i < currently_logged_in.length; i ++){
            if(currently_logged_in[i] == _user_address){
                address temp = currently_logged_in[currently_logged_in.length - 1];
                currently_logged_in[currently_logged_in.length - 1] = _user_address;
                currently_logged_in[i] = temp;
            }
        }
        currently_logged_in.pop();
    }
}